#N canvas 239 22 682 800 10;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X declare -lib mrpeach;
#X obj 46 145 pipelist;
#X obj 47 122 unpackOSC;
#X obj 46 97 udpreceive 7110;
#X floatatom 251 241 5 0 0 0 - - -;
#X msg 249 207 body;
#X msg 250 180 world;
#X obj 41 307 route r_knee;
#X obj 253 125 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 247 149 onOff \$1;
#X obj 42 263 topos.osceleton2skeleton body 3 1;
#X text 310 109 Switches 0/1 the broadcasting of the data;
#X obj 313 303 topos.skeleton 1;
#X obj 312 384 route data;
#X obj 312 360 r skeleton/1/l_hand/messages;
#X text 310 201 ARGUMENT 2: Changes the scale of the skeleton;
#X text 309 247 ARGUMENT 3: Sends the data to topos.skeleton N For
example \, if argument = 1 it will broadcast data to topos.skeleton
number 1:;
#X text 47 62 Get data from osceleton;
#X text 46 76 https://github.com/Sensebloom/OSCeleton;
#X text 312 334 It is also possible to retreive data using this receive:
;
#X obj 311 406 unpack f f f;
#X text 313 430 x y z;
#X obj 57 783 cnv 15 550 20 empty \$0-pddp.cnv.footer empty 20 12 0
14 -228856 -66577 0;
#X obj 13 -5 cnv 15 650 60 empty cnv.header topos.osceleton2skeleton
3 12 0 18 -204280 -1 0;
#X obj 61 486 cnv 3 550 3 empty \$0-pddp.cnv.inlets inlets 15 12 0
13 -228856 -1 0;
#X obj 61 636 cnv 3 550 3 empty \$0-pddp.cnv.outlets outlet 15 12 0
13 -228856 -1 0;
#X obj 56 703 cnv 3 550 3 empty \$0-pddp.cnv.more_info more_info 15
12 0 13 -228856 -1 0;
#X obj 130 592 cnv 17 3 40 empty \$0-pddp.cnv.let.1 1 5 9 0 16 -228856
-162280 0;
#X obj 130 506 cnv 17 3 80 empty \$0-pddp.cnv.let.0 0 5 9 0 16 -228856
-162280 0;
#N canvas 317 454 504 212 guts 0;
#X msg 81 65 \; cnv.header label topos.osceleton2skeleton;
#X msg 79 104 cnv.header vis_size 650 60;
#X restore 506 785 pd guts;
#X text 16 21 description: receives data from osceleton and prepares
it to display and process;
#X text 441 20 Topos Library;
#X text 548 22 http://naveda.info;
#X obj 496 360 r pos/1/l_hand;
#X obj 445 677 01-info_about_body_namespaces;
#N canvas 213 424 404 169 related 0;
#X obj 16 36 topos.skeleton;
#X obj 15 58 topos.synapse2skeleton;
#X restore 509 729 pd related objects;
#N canvas 496 267 494 344 META 0;
#X text 12 25 LICENSE LGPL v2.1;
#X text 18 165 AUTHOR Luiz Naveda;
#X text 15 185 WEBSITE http://naveda.info;
#X text 15 204 HELP_PATCH_AUTHORS "pd meta" information added by Luiz
Naveda for 0.43.4-extended;
#X text 12 5 KEYWORDS;
#X text 12 45 DESCRIPTION;
#X text 14 79 INLET_0;
#X text 14 99 INLET_1;
#X text 14 119 INLET_2;
#X text 17 142 OUTLET_0;
#X restore 560 786 pd META;
#X text 159 504 LIST - data from kinect via OSC;
#X text 160 592 FLOAT -;
#X text 204 610 (if you want longer lines \, you can use [cyclone/comment])
;
#X text 210 592 multiplies the;
#X obj 443 1 topos.osceleton2skeleton;
#X text 42 328 routes body data;
#X text 209 285 new skeleton;
#X obj 132 636 cnv 17 3 40 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 160 654 LISTS - list containing body positions;
#X text 314 142 ARGUMENT 1 : changes spatial reference. World does
not change data from the kinect. Body will translate the body points
to a reference where the torso is always at 0 0 0 position;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 1 1 0 1;
#X connect 2 0 1 0;
#X connect 3 0 9 1;
#X connect 4 0 9 0;
#X connect 5 0 9 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 9 0 6 0;
#X connect 12 0 19 0;
#X connect 13 0 12 0;
#X connect 32 0 12 0;
